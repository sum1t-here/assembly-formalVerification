// send call data -> function dispatch -> function

/* Interface -> pass function sig */ 
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // 0

#define macro MAIN() = takes(0) returns(0){
    0x00 calldataload 0xe0 shr              // [function_selector]
    // updateNumberOfHorses, 0xcdfead2e
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi     // [function_selector]
    // readNumberOfHorses, 0xe026c017
    __FUNC_SIG(readNumberOfHorses) eq readJump jumpi

    0x00 0x00 revert // []

    updateJump:
        SET_NUMBER_OF_HORSES()

    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 2. Get the value of store from calldata
    0x04                                             // [4]
    calldataload                                     // [value]
     // 1. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]                  // [storage_slot, value]
    // 3. sstore opcode
    sstore
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 1. Get the storage slot
    // 2. Load the value of that slot in memory
    // 3. Return
    [NUMBER_OF_HORSES_STORAGE_SLOT]     // [key]
    sload                               // [value]
    0x00                                // [0, value]
    mstore                              // []   // Memory: [value]
    // 0x20 -> 32 bytes
    0x20 0x00 return
}